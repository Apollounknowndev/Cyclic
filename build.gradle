plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
import net.minecraftforge.gradle.common.tasks.SignJar

version = "${mc_version}-${mod_version}"
group = 'com.lothrazar.cyclic'
archivesBaseName = 'Cyclic'

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
	mappings channel: 'official', version: '1.19.2'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

						// probably for patchouli
            property 'mixin.env.disableRefMap', 'true'
		  
            mods {
                cyclic {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.disableRefMap', 'true'

            mods {
                cyclic {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
	
	
    // https://github.com/mezz/JustEnoughItems/wiki/Getting-Started-%5BJEI-10-or-higher-for-Forge-or-Fabric%5D#repositories
	compileOnly fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}")
	compileOnly fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}")
	// at runtime, use the full JEI
//	runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-common:${jei_version}")
	runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")
	  
    implementation fg.deobf("top.theillusivec4.curios:curios-forge:${mc_version}-${curios_version}")
	
    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${mc_version}-${patchouli_version}:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${mc_version}-${patchouli_version}")
    
    // mods that have optional/soft integration
   // runtimeOnly fg.deobf("curse.maven:liquid-blocks-301999:3873025")
   // runtimeOnly fg.deobf("curse.maven:just-enough-effect-descriptions-jeed-532286:3944903")
  //  runtimeOnly fg.deobf("curse.maven:plain-grinder-452000:3653027")

  //  runtimeOnly fg.deobf("curse.maven:farmers-delight-398521:3834150")

}

repositories {

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
   flatDir {
        dir 'libs'
   }
   maven { // TOP
        name 'tterrag maven'
        url "https://maven.tterrag.com/"
   }
  maven {
    name = "mappings"
    url 'https://dogforce-games.com/maven'
  }
  maven { url = "https://maven.theillusivec4.top/"    }
  maven { url 'https://dvs1.progwml6.com/files/maven/'  }
  maven { url 'https://maven.blamejared.com' }    
  maven { url = "https://modmaven.dev"  }    
//  maven { url 'https://www.cursemaven.com'  }
}
// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "cyclic",
            "Specification-Vendor": "cyclicsareus",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"cyclicsareus",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

task signJar(type: SignJar, dependsOn: jar) {

    onlyIf {
        project.hasProperty('keyStore')
    }
    // findProperty allows us to reference the property without it existing. 
    // Using project.propName would cause the script to fail validation if 
    // the property did not exist. 
    keyStore = project.findProperty('keyStore')
    alias = project.findProperty('keyStoreAlias')
    storePass = project.findProperty('keyStorePass')
    keyPass = project.findProperty('keyStoreKeyPass')
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}



task copyJar(type: Copy) {
    from jar
    into "${dist_folder}"
}


task cleanJar {
  delete 'build/libs'
}

